function joinonids, master, slave, $
                    MASTER_ID_TAG = master_ID_TAG, $
                    SLAVE_ID_TAG = slave_id_tag, $
                    STRIPTAG = striptag

  if NOT keyword_set(MASTER_ID_TAG) then $
     master_id_tag = 'ID_TAKA'

  if NOT keyword_set(slave_ID_TAG) then $
     slave_id_tag = 'ID_TAKA'
  
  n1 = n_elements(master)
  n2 = n_elements(slave)

  mtags = tag_names(master)
  newtags = tag_names(slave)
  ntags = n_elements(newtags)

  midtag = (where(mtags eq master_id_tag))[0]
  sidtag = (where(newtags eq slave_id_tag))[0]

  sinds = []
  minds = []
  for ii = 0, n_elements(master) - 1 do begin
     hit = where(slave.(sidtag) eq master[ii].(midtag), nhit)
     if nhit eq 1 then begin
        hit = hit[0]
        minds = [minds, ii]
        sinds = [sinds, hit]
     endif
  endfor

  if n_elements(striptag) gt 0 then begin
     check = []    
     for ii = 0, n_elements(striptag) - 1 do $
        check = [check, where(newtags eq striptag[ii])]
  endif else check = !VALUES.F_NAN
  
  tagsdone = 0
  for ii = 0, ntags - 1 do begin

     if ~total(check eq ii) then begin
     
        tmpdata = slave.(ii)
        type    = size(tmpdata, /tname)
        case type of
           'STRING' : tmpVal = 'string(-99)'
           'FLOAT'  : tmpVal = '-99.'
           'LONG'   : tmpVal = '-99L'
           'INT'    : tmpVal = '-99'
           'DOUBLE' : tmpVal = '-99.d'
        endcase
        
        if tagsdone eq 0 then begin
           com = 'tmpstruct = {'+newtags[ii]+': '+string(tmpVal)+'}'
           foo = execute(com)
           com = 'tmpstruct = replicate(tmpstruct, n1)'
           foo = execute(com)           
        endif else begin
           com = 'tmpstruct1 = {'+newtags[ii]+': '+string(tmpVal)+'}'
           foo = execute(com)
           com = 'tmpstruct1 = replicate(tmpstruct1, n1)'
           foo = execute(com)
           tmpstruct = struct_addtags(tmpstruct, tmpstruct1)
        endelse
        
        tmpstruct[minds].(tagsdone) = tmpdata[sinds]

        tagsdone++
        
     endif

  endfor

  joined = struct_addtags(master, tmpstruct)
  
  RETURN, joined
end


;; For some reason, MACS0416 and ABEL0370 lack all of the standard
;; data comapred to the other fields. This program will pull out the
;; necessary "cutOnZ" and "cutOnMag"-formatted files for whatever you
;; can scrounge together for those fields

pro add0370and0416

  ;; Do 0370
  master    = '../MasterCats_V1/ABEL0370_glass_srclist.fits'
  gigCat    = '../MasterCats_V1/ABEL0370_glass_GiG_results.fits'
  redshifts = '../MasterCats_V1/ABEL0370_glass_redshifts.fits'
  tids     = '/data/code/mtaka/HFF/Public/SEXT/f160w_05.cat'
  photo_z  = '/data/code/mtaka/HFF/Public/EAZY/photz_05.zout'
  
  print, f = $
         '(%"\n\nAPPENDING ABEL0370 GiG RESULTS TO MASTER GLASS SOURCE CATALOG ...\n\n")'
  join2cats, master, gigCat, 'tmp1.fits', $
             striptag = 'GLASS_ID'

  print, f = $
         '(%"\n\nAPPENDING ABEL0370 GiGZ RESULTS TO GLASS SOURCE + GiG CATALOG ...\n\n")'
  join2cats, 'tmp1.fits', redshifts, 'tmp2.fits', $
             striptag = ['GLASS_ID', 'RA', 'DEC']

  print, f = $
         '(%"\n\nTRANSLATING ABEL0370 TAKAHIRO CATALOG ...\n\n")'
  readtakamaster, tids, 'ABEL0370_takaID.fits'

  print, f = $
         '(%"\n\nTRANSLATING ABEL0370 TAKAHIRO PHOTO-Z CATALOG ...\n\n")'
  readtakaphotoz, photo_z, 'ABEL0370_takaPhotoz.fits'

  print, f = $
         '(%"\n\nCOMBINING ABEL0370 TAKAHIRO CATALOGS ...\n\n")'
  
  tid = mrdfits('ABEL0370_takaID.fits', 1)
  tpz = mrdfits('ABEL0370_takaPhotoz.fits', 1)

  ttot = joinOnIDs(tid, tpz, striptag = 'ID_TAKA')
   

  stop
  
end
